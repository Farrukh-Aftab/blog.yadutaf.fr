<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev Web on Yet another enthusiast blog!</title>
    <link>http://blog.yadutaf.fr/categories/dev-web/</link>
    <description>Recent content in Dev Web on Yet another enthusiast blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.yadutaf.fr/categories/dev-web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>G√©rer son site avec GIT sur un serveur mutualis√©</title>
      <link>http://blog.yadutaf.fr/2013/11/30/gerer-son-site-avec-git-sur-un-serveur-mutualise/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2013/11/30/gerer-son-site-avec-git-sur-un-serveur-mutualise/</guid>
      <description>

&lt;p&gt;Que l&amp;rsquo;on souhaite disposer simplement d&amp;rsquo;un gestionnaire de version pour un projet occasionnel ou mettre en place une v√©ritable solution &amp;#8220;d&amp;rsquo;Int√©gration Continue&amp;#8221; (&amp;#8220;Continuous Integration&amp;#8221; en anglais ou &amp;#8220;CI&amp;#8221;) GIT est probablement la solution la plus puissante et la plus versatile. Cet article retrace les √©tapes cl√©s pour mettre en place GIT sur un serveur mutualis√©.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pr√©requis&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compte Mutualis√© avec acc√®s SSH (&lt;a href=&#34;http://www.ovh.com/fr/hebergement-web/&#34; title=&#34;H√©bergement Web chez OVH&#34;&gt;√† partir de l&amp;rsquo;offre pro chez OVH par ex&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Connaissance de base de GIT ainsi qu&amp;rsquo;un client fonctionnel (&lt;a href=&#34;http://git-scm.com/documentation&#34; title=&#34;Introduction √† GIT&#34;&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Connaissances de bases de SSH/Bash&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;premi√®re-√©tape-initialiser-un-d√©p√¥t-distant:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Premi√®re √©tape: Initialiser un d√©p√¥t distant&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dans votre &amp;#8220;/homez.123/&lt;votre identifiant&gt;&amp;#8221;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git init --bare site-perso.git
# Initialized empty Git repository in /homez.123/identifiant/site-perso.git/
&lt;/pre&gt;

&lt;p&gt;Cette commande initialise un d√©p√¥t git &amp;#8220;nue&amp;#8221; (bare) dans le dossier `site-perso.git`. Aucune copie de travail ne sera pr√©sente sur le serveur. Et c&amp;rsquo;est probablement ce que vous voulez üòâ&lt;/p&gt;

&lt;h2 id=&#34;deuxi√®me-√©tape-clone-local-et-premi√®re-publication:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Deuxi√®me √©tape: Clone local et premi√®re publication&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Clone local:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git clone identifiant@ftp.cluster012.ovh.net:site-perso.git
# Cloning into &#39;site-perso&#39;...
# warning: You appear to have cloned an empty repository.
# Checking connectivity... done
cd site-perso/
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Cr√©ation d&amp;rsquo;une premi√®re page:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;echo &#34;Bienvenu sur mon nouveau site&#34; &amp;gt; index.html
git add index.html
git commit -am &#34;ajoute la page d&#39;accueil&#34;
# [master (root-commit) 87a0483] ajoute la page d&#39;accueil
#  1 file changed, 1 insertion(+)
#  create mode 100644 index.html
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Publication:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git push origin master
# Counting objects: 3, done.
# Writing objects: 100% (3/3), 262 bytes | 0 bytes/s, done.
# Total 3 (delta 0), reused 0 (delta 0)
# To identifiant@ftp.cluster012.ovh.net:site-perso.git
#  * [new branch]      master -&amp;gt; master
&lt;/pre&gt;

&lt;p&gt;On a maintenant un site avec une page statique versionn√©. Une copie du d√©p√¥t GIT se trouve directement sur le serveur web. Toute personne disposant d&amp;rsquo;un acc√®s √† ce compte SSH aura la possibilit√© de contribuer au d√©p√¥t.&lt;/p&gt;

&lt;h2 id=&#34;troisi√®me-√©tape-optionnelle-acc√®s-collaborateurs-et-public:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Troisi√®me √©tape (optionnelle): Acc√®s collaborateurs et Public&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Acc√®s en √©criture pour les collaborateurs, restreint √† GIT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dans la mesure o√π l&amp;rsquo;on a pas la main sur le syst√®me d&amp;rsquo;authentification syst√®me, on va utiliser l&amp;rsquo;authentification par cl√© publique ssh en for√ßant la commande &amp;#8220;git-shell&amp;#8221;. De cette mani√®re, on bloque l&amp;rsquo;acc√®s √† toutes actions autres que GIT (sftp, shell, tunnel, &amp;#8230;). Pour plus d&amp;rsquo;information sur l&amp;rsquo;authentification par cl√© publique SSH, je vous invite √† consulter &lt;a href=&#34;http://git-scm.com/book/fr/Git-sur-le-serveur-G%C3%A9n%C3%A9ration-des-cl%C3%A9s-publiques-SSH&#34; title=&#34;Manuel GIT - authentification par cl√© publique SSH&#34;&gt;l‚Äôexcellent manuel de GIT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dans le fichier &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;, ajoutez une ligne du type:&lt;/p&gt;

&lt;pre class=&#34;brush: plain; title: ; notranslate&#34; title=&#34;&#34;&gt;command=&#34;git-shell&#34;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAD3NzaC1yc2EABBBCIwAAAQEAtRFmADxUSCX97CS/Uh7/N0y0vL...
&lt;/pre&gt;

&lt;p&gt;En utilisant une technique comparable il serait possible de mettre en place un contr√¥le d&amp;rsquo;autorisation fine mais cela sort du cadre de cet article. Pour plus d&amp;rsquo;informations sur une piste possible, je vous invite √† consulter le tr√®s complet &lt;a href=&#34;https://github.com/sitaramc/gitolite/&#34;&gt;projet gitolite&lt;/a&gt;. Bien qu&amp;rsquo;il ne soit pas tr√®s adapt√© √† un h√©bergement mutualis√©, ses techniques pourront servir de r√©f√©rence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acc√®s en public en lecture seule:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exemple: ouvrir un acc√®s public √† &lt;code&gt;site-perso.git&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;# Dans votre &#34;/homez.123/&amp;lt;votre identifiant&amp;gt;&#34;

# 1/ activer la publication automatique
mv site-perso.git/hooks/post-update.sample site-perso.git/hooks/post-update
chmod +x site-perso.git/hooks/post-update

# 2/ publication dans le dossier web `public-git`
mkdir -p www/public-git
cd www/public-git
ln -s ../../site-perso.git ./
&lt;/pre&gt;

&lt;p&gt;Votre d√©p√¥t peut maintenant √™tre clon√© avec &lt;code&gt;git clone http://www.example.com/public-git/site-perso.git&lt;/code&gt;. Pour r√©voquer l&amp;rsquo;acc√®s, il suffit de supprimer le lien dans &lt;code&gt;www/public-git/site-perso.git&lt;/code&gt;. Il n&amp;rsquo;est pas n√©cessaire de supprimer le &amp;#8220;hook&amp;#8221;. Pour ajouter une authentification minimale, la m√©thode habituelle par &amp;#8220;htaccess&amp;#8221; pourra √™tre employ√©e.&lt;/p&gt;

&lt;h2 id=&#34;quatri√®me-√©tape-optionnelle-d√©ploiement-continue-oh-yeah:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Quatri√®me √©tape (optionnelle): D√©ploiement continue (Oh Yeah !)&lt;/h2&gt;

&lt;p&gt;La cr√®me de la cr√®me avec GIT, ce sont les &amp;#8220;hook&amp;#8221; que je traduirai par &amp;#8220;prises&amp;#8221; en fran√ßais. Ce sont des points sur lesquels on se branche ais√©ment pour personnaliser un traitement. On a d√©j√† utilis√© l&amp;rsquo;un de ceux qui sont fourni √† titre d&amp;rsquo;exemple dans tout d√©p√¥t GIT pour le rendre disponible en HTTP.&lt;/p&gt;

&lt;p&gt;Ici, nous avons besoin d&amp;rsquo;une &amp;#8220;prise&amp;#8221; sur mesure qui va se charger de mettre √† jour &lt;code&gt;site-perso&lt;/code&gt; √† chaque fois qu&amp;rsquo;une mise √† jour est &amp;#8220;pouss√©e&amp;#8221; (publi√©e) sur la branche &amp;#8220;prod&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple de &amp;#8220;prise&amp;#8221; GIT assurant la publication automatique:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: site-perso.git/hooks/post-receive; notranslate&#34; title=&#34;site-perso.git/hooks/post-receive&#34;&gt;#!/bin/bash

# Pour chaque branche affect√©e par un &#34;push&#34;, GIT
# nous passe sur une ligne et dans cet ordre:
# &amp;lt;ancienne r√©vision&amp;gt; &amp;lt;nouvelle r√©vision&amp;gt; &amp;lt;~nom de la branche&amp;gt;
while read oldrev newrev ref
do
    branch=`echo $ref | cut -d/ -f3`
    # mise √† jour de la version de production ?
    if [ &#34;$branch&#34; == &#34;prod&#34; ]
    then
        reponame=$(basename `pwd` | sed &#39;s/\.git$//&#39;)
        # 1/ passer le site en maintenance
        echo &#34;[$reponame] 1/4 Passage en mode maintenance&#34;
        # 2/ mettre √† jour le code 
        echo &#34;[$reponame] 2/4 Mise √† jour&#34;
        GIT_WORK_TREE=~/$reponame git checkout -f $branch
        # 3/ Param√®trage, migration de sch√©ma, ...
        echo &#34;[$reponame] 3/4 Migration&#34;
        # 4/ rendre le site √† nouveau disponible
        echo &#34;[$reponame] 4/4 Passage en mode production&#34;
    fi
done
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Activer la prise:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;chmod +x site-perso.git/hooks/post-receive&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple de fonctionnement:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: session git locale &amp;#039;site-perso&amp;#039;; notranslate&#34; title=&#34;session git locale &amp;#039;site-perso&amp;#039;&#34;&gt;git checkout master
# Switched to branch &#39;master&#39;

echo &#34;version 1.2&#34; &amp;gt;&amp;gt; CHANGELOG
git commit -am &#34;Update CHANGELOG&#34;
# [master 75c770c] Update CHANGELOG
#  1 file changed, 1 insertion(+)

git checkout prod
# Switched to branch &#39;prod&#39;

git merge master
# Updating 2f8b5ca..75c770c
# Fast-forward
#  CHANGELOG | 1 +
#  1 file changed, 1 insertion(+)

git push
# Counting objects: 5, done.
# Delta compression using up to 4 threads.
# Compressing objects: 100% (2/2), done.
# Writing objects: 100% (3/3), 312 bytes | 0 bytes/s, done.
# Total 3 (delta 0), reused 0 (delta 0)
# remote: [site-perso] 1/4 Passage en mode maintenance
# remote: [site-perso] 2/4 Mise a jour
# remote: Switched to branch &#39;prod&#39;
# remote: [site-perso] 3/4 Migration
# remote: [site-perso] 4/4 Passage en mode production
# To lj75593x1@ftp.cluster012.ovh.net:site-perso.git
#    2f8b5ca..75c770c  master -&amp;gt; master
#    2f8b5ca..75c770c  prod -&amp;gt; prod
&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;GIT est incroyablement puissant, mais √ßa vous le saviez d√©j√†. Bien ma√Ætris√©, il permet de mettre en place √† moindre frais une v√©ritable solution de d√©ploiement continue et de travail collaboratif pour un site Web. Un grand &amp;#8220;plus&amp;#8221; en terme de professionnalisme. D&amp;rsquo;autre part, cette solution √† l&amp;rsquo;immense avantage de fonctionner avec une offre d&amp;rsquo;h√©bergement mutualis√© en disposant d&amp;rsquo;un simple acc√®s SSH+GIT.&lt;/p&gt;

&lt;p&gt;Happy GITing !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress: from localhost to production</title>
      <link>http://blog.yadutaf.fr/2013/07/03/wordpress-from-localhost-to-production/</link>
      <pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2013/07/03/wordpress-from-localhost-to-production/</guid>
      <description>&lt;p&gt;Yesterday, a friend of mine asked me urgent help. He fully developed a WP based website for a research project on &lt;em&gt;localhost/his_website&lt;/em&gt;. As WP stores &lt;em&gt;full links&lt;/em&gt; pretty much everywhere in the database, his website was obviously completely broken when he moved it to production on &lt;em&gt;his_website.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I quickly put some PHP lines of codes together to fix the whole DB at once. Feel free to re-use it in your own projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;usage&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;put the script on your server, for example /website/root/wordpress_production.php&lt;/li&gt;
&lt;li&gt;configure DB connection + old and new URL&lt;/li&gt;
&lt;li&gt;visit &lt;a href=&#34;http://www.your_website.com/wordpress_production.php&#34;&gt;http://www.your_website.com/wordpress_production.php&lt;/a&gt; (you should see nothing)&lt;/li&gt;
&lt;li&gt;you&amp;rsquo;re done !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DISCLAIMER: this script comes with NO WARRANTY. USE IT AT YOUR OWN RISKS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gmail Oauth2 with Python and bottle</title>
      <link>http://blog.yadutaf.fr/2013/05/29/gmail-oauth2-with-python-and-bottle/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2013/05/29/gmail-oauth2-with-python-and-bottle/</guid>
      <description>&lt;p&gt;Remember my previous post about &lt;a href=&#34;https://blog.jtlebi.fr/2013/04/12/fetching-all-messages-since-last-check-with-python-imap/&#34; title=&#34;Fetching all messages since last check with Python + Imap&#34;&gt;checking out only new mails from a IMAP account with Python&lt;/a&gt; ? The main issue with this was the absolute need for user&amp;rsquo;s password.&lt;/p&gt;

&lt;p&gt;The solution for this OAuth2&amp;#8230; which has no decent support for Python 3. Well, it&amp;rsquo;s not exactly true. Guys behind &lt;a href=&#34;https://pypi.python.org/pypi/oauthlib&#34;&gt;oauthlib&lt;/a&gt; did quite a good job but OAuth2 is such a generic framework that using a library quickly requires you to write more code than without anyway.&lt;/p&gt;

&lt;p&gt;Soooo, enough talks. First, &lt;a href=&#34;https://code.google.com/apis/console#access&#34;&gt;get you API key here.&lt;/a&gt; Make sure to create a web-application for this example.&lt;/p&gt;

&lt;p&gt;Then it&amp;rsquo;s merely a matter of reading/implementing the spec. Most documentation will warn you on how hard and overly complicated it is. It is NOT. Well, not for a hacker like you anyway üòâ Here are the basic ideas behind the protocol. I&amp;rsquo;ll provide a link to the full source code at the end of this post.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;redirect the user you want to authenticate to authorization page&lt;/li&gt;
&lt;li&gt;authorization page redirects your user to your callback and gives you a CODE (must be pre-defined in the console or the process will miserably fail)&lt;/li&gt;
&lt;li&gt;on the server side, ask GOOGLE to exchange this CODE for a TOKEN + REFRESH_TOKEN&lt;/li&gt;
&lt;li&gt;GOOGLE gives you both back along with the token&amp;rsquo;s lifetime.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most of the time, the CODE must be consumed within 10min. DON&amp;rsquo;T use it twice, otherwise GOOGLE might consider it stolen and revoke every single token and refresh token granted with it. You&amp;rsquo;ve been warned.&lt;/p&gt;

&lt;p&gt;The TOKEN will usually expire after an hour. Once expired, you will need to renew it. If you blindly used the provided snippet (which I do not recommend given it&amp;rsquo;s draft quality), your application specified that it was in offline mode i.e your &lt;em&gt;user&lt;/em&gt; is not always online while you application accesses his account. Hence, you got a REFRESH TOKEN from Google to refresh the access token yourself. This second token never expires unless the user explicitly revokes your application access.&lt;/p&gt;

&lt;p&gt;The last step is now to get the job done and authenticate to the Gmail IMAP server using the provided token. Luckily, this is the easiest part.&lt;/p&gt;

&lt;pre class=&#34;brush: python; title: ; notranslate&#34; title=&#34;&#34;&gt;auth_string = &#39;user=%s\1auth=Bearer %s\1\1&#39; % (username, access_token)
imap_conn = imaplib.IMAP4_SSL(&#39;imap.gmail.com&#39;)
imap_conn.authenticate(&#39;XOAUTH2&#39;, lambda x: auth_string)
&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, you done !&lt;/p&gt;

&lt;p&gt;Full source code (~94 loc): &lt;a href=&#34;https://gist.github.com/jtlebi/5673096&#34;&gt;https://gist.github.com/jtlebi/5673096&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make this code clean (really !)&lt;/li&gt;
&lt;li&gt;Add state checking, this is essential both for anti-forgery checks and to track which user you were authenticating&amp;#8230;&lt;/li&gt;
&lt;li&gt;Add anti-forgery checks on the token by checking it&amp;rsquo;s ignature&lt;/li&gt;
&lt;li&gt;Plug the token refresh code in (needs to be called roughly every hours)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fetching all messages since last check with Python &#43; Imap</title>
      <link>http://blog.yadutaf.fr/2013/04/12/fetching-all-messages-since-last-check-with-python-imap/</link>
      <pubDate>Fri, 12 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2013/04/12/fetching-all-messages-since-last-check-with-python-imap/</guid>
      <description>&lt;p&gt;Recently, in a freelance project I had to parse incoming mails wherever they are in the mail account and, preferably, avoid re-parsing the whole mail account only for a couple of new mails.&lt;/p&gt;

&lt;p&gt;Fortunately, there is the low level &lt;a href=&#34;http://docs.python.org/3.2/library/imaplib.html&#34;&gt;imaplib&lt;/a&gt; module in Python&amp;rsquo;s toolbox. But, curiously enough, while the solution is quite simple, I have not been able to find any good solution on the net&amp;#8230;&lt;/p&gt;

&lt;p&gt;By default, when you perform a &lt;a href=&#34;http://tools.ietf.org/html/rfc3501#section-6.4.4&#34;&gt;SEARCH&lt;/a&gt; on an IMAP folder, it will provide you will &lt;em&gt;relative&lt;/em&gt; identifiers in the folder meaning that any operation on the folder might alter them. Another option, not obvious for an IMAP newcommer is to use UIDs instead. These constants IDs uniquely identifies a given during its lifetime in the mail account and are allocated in a strictly growing manner. This basically means that you can rely on this information to affirm that a given mail arrived in the mailbox after another one.&lt;/p&gt;

&lt;p&gt;Last interesting property, the IMAP SEARCH command return all mails whose UID is in a given range, &lt;em&gt;wildcard included&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For this projects, I also wrote it as a generator so that it yields at each new mail, if any. Here is a stripped down code snippet highlighting the main steps from connection negotiation to yielding individual mail bodies:&lt;/p&gt;

&lt;pre class=&#34;brush: python; title: ; notranslate&#34; title=&#34;&#34;&gt;# -*- coding: utf-8 -*-

import imaplib

# new mail generator --&amp;gt; yield after each mail to save resources
def new_mail(last_uid, host, port, login, password):
    # connect
    mail_server = imaplib.IMAP4(host, port)

    # authenticate
    mail_server.login(login, password)

    # issue the search command of the form &#34;SEARCH UID 42:*&#34;
    command = &#34;UID {}:*&#34;.format(last_uid)
    result, data = mail_server.uid(&#39;search&#39;, None, command)
    messages = data[0].split()

    # yield mails
    for message_uid in messages:
        # SEARCH command *always* returns at least the most
        # recent message, even if it has already been synced
        if int(message_uid) &amp;gt; last_uid:
            result, data = mail_server.uid(&#39;fetch&#39;, message_uid, &#39;(RFC822)&#39;)
            # yield raw mail body
            yield data[0][1]

# usage example
for mail in new_mail_generator(last_uid=42,
                               host=&#34;imap.example.com&#34;, port=143,
                               login=&#34;user@exampl.com&#34;,
                               password=&#34;password&#34;):
    # do something useful with raw mail
    pass

&lt;/pre&gt;

&lt;p&gt;Going further:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loop over all folders. (hint: see &amp;#8220;list&amp;#8221; method to get a folder list)&lt;/li&gt;
&lt;li&gt;Save sync status to a persistent storage like a database&lt;/li&gt;
&lt;li&gt;Parse mail body&lt;/li&gt;
&lt;li&gt;Handle secure connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need any help in your Python/Imap related project, &lt;a href=&#34;https://blog.jtlebi.fr/contact/&#34; title=&#34;Contact&#34;&gt;feel free to get in touch&lt;/a&gt; &lt;img src=&#34;https://blog.jtlebi.fr/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google HTTPS SEO (Nginx)</title>
      <link>http://blog.yadutaf.fr/2012/09/07/google-https-seo-nginx/</link>
      <pubDate>Fri, 07 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2012/09/07/google-https-seo-nginx/</guid>
      <description>&lt;p&gt;A couple of days ago, well, 5 to be precise, I moved this blog to a new server, new Nginx based stack. In the move, I decided to enforce secured HTTPS force all my services, including this blog. Privacy matters!&lt;/p&gt;

&lt;p&gt;Surprisingly enough, I suddenly disappeared from Google at the very same time.&lt;/p&gt;

&lt;p&gt;It appears to be linked to the HTTPS move. Disabling the systematic redirection to the secured protocol made it happy again.&lt;/p&gt;

&lt;p&gt;However, I still want to be automatically moved to the secure version every time I log into the backend. All WordPress admin pages starts with &amp;#8216;/wp-&amp;#8216;, it is then straight forward to make Nginx clever about security. Here is a nice snippet to put into the relevant &amp;#8216;server&amp;rsquo; section:&lt;/p&gt;

&lt;pre class=&#34;brush: cpp; title: ; notranslate&#34; title=&#34;&#34;&gt;location /wp-
    {
      if ($ssl_protocol = &#34;&#34;)
      {
          rewrite ^   https://$server_name$request_uri? permanent;
      }
    }
&lt;/pre&gt;

&lt;p&gt;instead of only&lt;/p&gt;

&lt;pre class=&#34;brush: cpp; title: ; notranslate&#34; title=&#34;&#34;&gt;if ($ssl_protocol = &#34;&#34;)
    {
        rewrite ^   https://$server_name$request_uri? permanent;
    }
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Understanding MVC with Express/Node.js and mongo.db</title>
      <link>http://blog.yadutaf.fr/2011/11/20/understanding-mvc-with-express-node-js-and-mongo-db/</link>
      <pubDate>Sun, 20 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2011/11/20/understanding-mvc-with-express-node-js-and-mongo-db/</guid>
      <description>

&lt;p&gt;Coming from the PHP/MySQL world, I got used to frameworks such as the lightweight &lt;a href=&#34;http://codeigniter.com/&#34;&gt;CodeIgniter&lt;/a&gt; or the very complete¬† &lt;a href=&#34;http://symfony.com/&#34;&gt;Symfony&lt;/a&gt; and I missed clean MVC coding. My previous node.js app barely stand in a single controller &lt;a href=&#34;http://blog.jtlebi.fr/2011/09/19/nodejs-reverse-proxy/&#34; title=&#34;Node.Js reverse proxy&#34;&gt;as it was a reverse proxy&lt;/a&gt;. This time, I wondered how I could write a bare minimum clean registration form.&lt;/p&gt;

&lt;p&gt;For this &amp;#8220;application&amp;#8221;, the goals were to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide users with a registration form&lt;/li&gt;
&lt;li&gt;Provide us with a registered user list and a CSV exporter&lt;/li&gt;
&lt;li&gt;Store the registrations in a Mongo.DB collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As this post is pretty long, not all the source code will be provided in this post. You can download them as well as to test a simplified version of a real-world&amp;trade; app I did to provide visitors in an event to register and leave their contact on my company&amp;rsquo;s stand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Demo application: &lt;a href=&#34;http://test1.jtlebi.fr/&#34;&gt;http://test1.jtlebi.fr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Full source Code: &lt;a href=&#34;http://blog.jtlebi.fr/wp-content/uploads/2011/11/inscrit-demo.zip&#34;&gt;inscrit-demo.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use the source code directly, you will need to run these 2 commands from the zip root directory :&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;npm install
node app.js&lt;/pre&gt;

&lt;p&gt;The following parts of this post will assume that you start from scratch, without this archive.&lt;/p&gt;

&lt;h1 id=&#34;setup:37973bb4341bd246a575a1b01ee2d703&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;If not yet done, go to &lt;a href=&#34;http://nodejs.org/&#34;&gt;http://nodejs.org/&lt;/a&gt; and download the Node.JS installer for your platform. For linux users, I recommend you to build it from source as this is a fast moving project and most distributions packages are outdated.&lt;/p&gt;

&lt;p&gt;You will also need Mongo.DB, which is available from this page:¬†&lt;a href=&#34;http://www.mongodb.org/&#34;&gt;http://www.mongodb.org/&lt;/a&gt;. For those not already familiar with it, Mongo.DB is a document oriented Database Engine. Unlike relational databases no schema is required and the query are done with a DSL (Domain Specific Language). This make this engine very fast and easy to replicate to the cost of managing yourself data coherence.&lt;/p&gt;

&lt;p&gt;The last thing you will need is the Node.JS package manager. To install it on UNIX like Operating System is pretty easy :&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;curl http://npmjs.org/install.sh | sh&lt;/pre&gt;

&lt;p&gt;Users of Windows will sadly need to follow a pretty tedious procedure which is documented here : &lt;a href=&#34;http://npmjs.org/doc/README.html&#34;&gt;http://npmjs.org/doc/README.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You are now ready to start building your application&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;npm install -g express #get the framework
express . #setup the project with default settings&lt;/pre&gt;

&lt;p&gt;Edit the Manifest :&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;//file package.json
{
&#34;name&#34;: &#34;MyRegistrationApp&#34;
, &#34;version&#34;: &#34;1.0.0-pre&#34;¬†¬† /* Version number. No Space nor special chars */
, &#34;private&#34;: true
, &#34;dependencies&#34;: {
&#34;express&#34;: &#34;2.5.0&#34;¬†¬†¬†¬† /* Framework */
, &#34;jade&#34;: &#34;&amp;gt;= 0.0.1&#34;¬†¬†¬†¬† /* Template engine */
, &#34;mongoose&#34;: &#34;&amp;gt;=2.3.13&#34; /* Node.JS Mongo.DB API */
}
}&lt;/pre&gt;

&lt;p&gt;Please note that comments in JSON¬† are NOT legal. You must strip them out of this snippet to use it !&lt;/p&gt;

&lt;p&gt;Now that the project is ready we can install all the dependencies. Unlike Express installation, we skip the &amp;#8220;-g packageName&amp;#8221;. &amp;#8220;-g&amp;#8221; stands for &amp;#8220;global&amp;#8221;. In this case we install them in the project scope only. This way, we can have multiple projects with different versions of the libraries. When &amp;#8220;packageName&amp;#8221; is not provided, NPM will automatically look for the &amp;#8220;dependencies section&amp;#8221; in the &amp;#8220;package.json&amp;#8221; file.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;npm install&lt;/pre&gt;

&lt;p&gt;The resulting directory structure should look like this. If some directories are missing, do not hesitate to create them manually &lt;img src=&#34;https://blog.jtlebi.fr/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;project_root/
    - public/
        - javascripts/
        - stylesheets/
        - images/
    - models/
    - views/
    - routes/
    - config/
    - node_modules/
        ...&lt;/pre&gt;

&lt;p&gt;In order to spare some time and focus on the development work, I suggest you to use the twitter css bootstrap. It will provide you with a nice and clean stylesheet. In the following code snippets of this article, I&amp;rsquo;ll assume you are using this framework.&lt;/p&gt;

&lt;h1 id=&#34;the-model:37973bb4341bd246a575a1b01ee2d703&#34;&gt;The Model&lt;/h1&gt;

&lt;p&gt;The model is the place where the data type is defined. The first step is to identify the required fields and their constraints. To keep the example minimal, I&amp;rsquo;ll use just a little subset :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title. Mandatory. Must be one of

&lt;ul&gt;
&lt;li&gt;Mr&lt;/li&gt;
&lt;li&gt;Ms&lt;/li&gt;
&lt;li&gt;Miss&lt;/li&gt;
&lt;li&gt;Mrs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Firstname. Mandatory.&lt;/li&gt;
&lt;li&gt;Lastname. Mandatory.&lt;/li&gt;
&lt;li&gt;E-Mail. Mandatory.&lt;/li&gt;
&lt;li&gt;Date. Mandatory. Auto-generated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This leads to the following schema :&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;var MemberSchema = new Schema({
    id        : ObjectId,
    title     : { type: String, required: true, enum: [&#39;Mr&#39;, &#39;Mrs&#39;, &#39;Mme&#39;, &#39;Miss&#39;] },
    lastname  : { type: String, required: true, uppercase: true, trim: true},
    firstname : { type: String, required: true},
    mail      : { type: String, required: true, trim: true, index: { unique: true, sparse: true } },
    date      : Date
});&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s write it in file models/MemberModel.js. To get it to work, we need to import Mongoose API in the file header :&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;var mongoose = require(&#39;mongoose&#39;),
    Schema = mongoose.Schema,
    ObjectId = Schema.ObjectId;&lt;/pre&gt;

&lt;p&gt;You noticed that the &amp;#8220;date&amp;#8221; field should be auto-generated. This can be achieved with a default value. This time, although this could be done in the schema, we will do it separately to show how to decorate an existing schema. Please note that another extremely powerful tool is available in Mongoose. These are the middleware.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;// Date setter
MemberSchema.path(&#39;date&#39;)
    .default(function(){
        return new Date()
    })
    .set(function(v){
        return v == &#39;now&#39; ? new Date() : v;
    });&lt;/pre&gt;

&lt;p&gt;The last step for the model is to expose it to the application chunk :&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;module.exports = mongoose.model(&#39;Members&#39;, MemberSchema);&lt;/pre&gt;

&lt;h1 id=&#34;the-view:37973bb4341bd246a575a1b01ee2d703&#34;&gt;The view&lt;/h1&gt;

&lt;p&gt;The view is the place where the actual web page you see is generated from data computed in the controller. In small projects such as this one, I usually code the controller at last since it is the &amp;#8220;glue&amp;#8221; between the Model and the View.&lt;/p&gt;

&lt;p&gt;For this example, I did 2 views. The first one is the registration form while the second one displays a list of registered members.&lt;/p&gt;

&lt;p&gt;Since the header of theses pages are common, we will put it in a separate file called &amp;#8220;views/layout.jade&amp;#8221;. The first line of this templates tells the template engine to insert the HTML5 DOCTYPE. As in python, there is no closing tags but the indentation is semantical. This helps to keep the code readable ! The first CSS file is provided by the bootstrap CSS framework maintained on Github by Twitter. An &amp;#8220;=&amp;#8221; sign tells Jade to load a variable, attribute list is between &amp;#8220;(&amp;#8221; and &amp;#8220;)&amp;#8221; and the text to put write is what follows.&lt;/p&gt;

&lt;pre class=&#34;brush: plain; title: ; notranslate&#34; title=&#34;&#34;&gt;!!! 5
html
  head
    title= title
    link(rel=&#39;stylesheet&#39;, href=&#39;http://blog.yadutaf.fr/stylesheets/bootstrap.css&#39;)
    link(rel=&#39;stylesheet&#39;, href=&#39;http://blog.yadutaf.fr/stylesheets/styles.css&#39;)
    //if lt IE 9
        script(src=&#34;http://html5shim.googlecode.com/svn/trunk/html5.js&#34;, language=&#34;text/javascript&#34;)
  body!= body&lt;/pre&gt;

&lt;p&gt;The conditional tag &amp;#8220;lt IE 9&amp;#8221; allows us to use HTML 5 tags in our layout. The other half of this trick takes place in style.css :&lt;/p&gt;

&lt;pre class=&#34;brush: css; title: ; notranslate&#34; title=&#34;&#34;&gt;/*[...]*/
/*HTML 5 compat*/
header, section, article, nav, footer, aside, hgroup{
    display: block;
}
/*[...]*/&lt;/pre&gt;

&lt;p&gt;We will then define our 2 views: views/index.jade and views/list.jade They both contain the same header and same footer. You also can notice the use of &amp;#8220;header&amp;#8221; and &amp;#8220;footer&amp;#8221; tags. These are 2 new HTML tags adding some semantic to the web.&lt;/p&gt;

&lt;pre class=&#34;brush: plain; title: ; notranslate&#34; title=&#34;&#34;&gt;.container
    .content
        header.page-header
            h1 Title text
                small.subtitle Subtitle text
[...]
    footer
        p ¬© Illyse 2011&lt;/pre&gt;

&lt;p&gt;The first part of views/index.jade uses a loop to print messages and errors, if need be, right after the title :&lt;/p&gt;

&lt;pre class=&#34;brush: plain; title: ; notranslate&#34; title=&#34;&#34;&gt;.row
            article.span10
                - if (errors.length)
                    - errors.forEach(function(error){
                        .alert-message.error= error
                    - })
                - if (messages.length)
                    - messages.forEach(function(message){
                        .alert-message.success= message
                    - })&lt;/pre&gt;

&lt;p&gt;The remaining parts of this file basically defines a form using the new HTML 5 fields such as &amp;#8220;phone&amp;#8221;, &amp;#8220;url&amp;#8221; and &amp;#8220;email&amp;#8221; and new attributes such as &amp;#8220;required&amp;#8221; helping to perform some basic validation before the submission. As this is a very verbose part, I will skip it on this post.&lt;/p&gt;

&lt;p&gt;The body of views/list.jade basically loops over the members structures and displays all members in a table.&lt;/p&gt;

&lt;h1 id=&#34;the-controller:37973bb4341bd246a575a1b01ee2d703&#34;&gt;The controller&lt;/h1&gt;

&lt;p&gt;The controller is the part that glues the views and the models together. It takes the input from the user, routes it, handle it and then triggers the render of the view.&lt;/p&gt;

&lt;p&gt;For simplicity sake, I kept a single default controller &amp;#8220;routes/index.js&amp;#8221; with all the routing logic in the auto-generated &amp;#8220;app.js&amp;#8221;. It&amp;rsquo;s probably not the best and cleanest way to do it but it&amp;rsquo;s enough yet ;-).&lt;/p&gt;

&lt;p&gt;The only added part to &amp;#8220;app.js&amp;#8221;&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;// Routes

app.get(&#39;/&#39;, routes.index);
app.get(&#39;/list&#39;, routes.list);
app.get(&#39;/csv&#39;, routes.csv);
app.post(&#39;/&#39;, routes.index_post);&lt;/pre&gt;

&lt;p&gt;The file &amp;#8220;routes/index.js&amp;#8221; has two parts. In the first, it loads dependencies such as the database driver, connection and model.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;// loads model file and engine
var mongoose    = require(&#39;mongoose&#39;),
    memberModel = require(&#39;../models/MemberModel&#39;);

// Open DB connection
mongoose.connect(&#39;mongodb://localhost/mymembers&#39;);&lt;/pre&gt;

&lt;p&gt;The second part exports all function used by the router. The easiest one is the index page as it only triggers the render of the registration form.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;// Home page =&amp;gt; registration form
exports.index = function(req, res){
    res.render(&#39;index.jade&#39;, { title: &#39;My Registration App&#39;, messages: [], errors: [] });
};&lt;/pre&gt;

&lt;p&gt;This snippets tells express (the framework) to send the rendered version of template &amp;#8220;index.jade&amp;#8221; with this title, no message and no errors.&lt;/p&gt;

&lt;p&gt;The other routes of this controller are all build on the same model. Nonetheless, an interesting one is the &amp;#8220;csv&amp;#8221; export because it both uses database access and an &amp;#8220;advanced&amp;#8221; render feature: the ability to specify the content type and so trigger a download to the proper application instead of just displaying plain text.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;// Member list quick-and-dirty(tm) CSV export
exports.csv = function(req, res){
    memberModel.find({},function(err, docs){
        str = &#34;&#34;;
        docs.forEach(function (member) {
            str += member.title;
            str += &#34;; &#34; + member.firstname;
            str += &#34;; &#34; + member.lastname;
            str += &#34;; &#34; + member.mail;
            str += &#34;; &#34; + member.date;
            str += &#34;\n&#34;;
        });
        res.header(&#39;Content-type&#39;, &#39;text/csv&#39;);
        res.send(str);
    });
};&lt;/pre&gt;

&lt;h1 id=&#34;conclusion:37973bb4341bd246a575a1b01ee2d703&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This (long) post demonstrated and demystified quite a lot of modern technologies at once which may be a little confusing for a newcomer. Sadly, I could not get an in depth overview of these tools. It would have required many books ! Nonetheless, I hope it has been useful to you and help you getting started. have fun !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.Js reverse proxy</title>
      <link>http://blog.yadutaf.fr/2011/09/19/nodejs-reverse-proxy/</link>
      <pubDate>Mon, 19 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2011/09/19/nodejs-reverse-proxy/</guid>
      <description>&lt;p&gt;When I rented this OVH server, I wanted to be able to host all my web tools on it on port 80 using both my IPv6 and IPv4 stack. This is usually done with Apache&amp;rsquo;s &amp;#8220;ports.conf&amp;#8221; and VHost feature.&lt;/p&gt;

&lt;p&gt;In fact, most of my favorite applications are written using &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.Js&lt;/a&gt; and as such embeds there own server logic. It is not possible anymore to bind each of them to *:80.&lt;/p&gt;

&lt;p&gt;The only solution is then to use a reverse-proxy binded to all my real interfaces on port 80 and to forward calls based on the domain to the real applications listening to a random port of the loopback interface.&lt;/p&gt;

&lt;p&gt;I found an impressive 20 line basis on &lt;a href=&#34;http://www.catonmat.net/http-proxy-in-nodejs/&#34;&gt;Peteris Krumins&amp;rsquo; blog&lt;/a&gt; that I forked on Github. You can find &lt;a href=&#34;https://github.com/jtlebi/nodejs-proxy&#34;&gt;my modifications on my github fork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basic idea is to decode the &amp;#8220;host&amp;#8221; field of the HTTP 1.1 headers and to forward the requests according to the config file. This solves the &amp;#8220;VHost&amp;#8221; issue. Here are two helpers I use internally:&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;//decode host and port info from header
function decode_host(host){
    out={};
    host = host.split(&#39;:&#39;);
    out.host = host[0];
    out.port = host[1] || 80;
    return out;
}

//Find the more precise rule for this request.
//the actual rule decoding in done in &#34;handle_proxy_rule&#34;
//which i did not include in this snippet to keep it short üòâ
function handle_proxy_route(host, token) {
    //extract target host and port
    action = decode_host(host);
    action.action=&#34;proxyto&#34;;//default action

    //try to find a matching rule
    //rule of the form &#34;foo.domain.tld:port&#34;
    if(action.host+&#39;:&#39;+action.port in hostfilters)
    {
         rule=hostfilters[action.host+&#39;:&#39;+action.port];
         action=handle_proxy_rule(rule, action, token);
    }
    //rule of the form &#34;foo.domain.tld&#34;
    else if (action.host in hostfilters)
    {
         rule=hostfilters[action.host];
         action=handle_proxy_rule(rule, action, token);
    }
    //rule of the form &#34;*:port&#34;
    else if (&#34;*:&#34;+action.port in hostfilters)
    {
         rule=hostfilters[&#39;*:&#39;+action.port];
         action=handle_proxy_rule(rule, action, token);
    }
    //default rule
    else if (&#34;*&#34; in hostfilters)
    {
         rule=hostfilters[&#39;*&#39;];
         action=handle_proxy_rule(rule, action, token);
    }
    return action;
}
&lt;/pre&gt;

&lt;p&gt;It is then possible to put all this server logic in a separate callback that would be called by multiple listener. This solves the &amp;#8220;Dual stack&amp;#8221; issue.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;interface_to_listen_on = [
    {&#39;ip&#39;:&#34;0.0.0.0&#34;, &#39;port&#39;:80},//all IPv4 int
    {&#39;ip&#39;:&#34;::&#34;, &#39;port&#39;:80}//all IPv6 int
];

interface_to_listen_on.forEach(function(listen)
{
    port = listen.port;
    ip=listen.ip;
    sys.log(&#34;Starting server on port &#39;&#34; + ip+&#39;:&#39;+port);
    http.createServer(server_loop).listen(port, ip);
});&lt;/pre&gt;

&lt;p&gt;What if a malicious packet is forged that makes every thing crash ? Let&amp;rsquo;s add a small security layer. At least filtering based on source address was already done by the bootstrap code. I just added a &amp;#8220;last chance exception catcher&amp;#8221; and an input field check. Here is he last chance exception catcher. The filtering is pretty straight forward. It mostly is a matter of checking headers on by one and taking a decision.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;//last chance error handler
//it catch the exception preventing the application from crashing.
//I recommend to comment it in a development environment as it
//&#34;Hides&#34; very interesting bits of debugging informations.
process.on(&#39;uncaughtException&#39;, function (err) {
  console.log(&#39;LAST ERROR: Caught exception: &#39; + err);
});
&lt;/pre&gt;

&lt;p&gt;What if a redirect rule has an error that causes a loop ? Let&amp;rsquo;s add a special header indicating that a forward already happened. That&amp;rsquo;s all the trick.&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;function prevent_loop(request, response)
{
    //if request is already tooted =&amp;gt; loop 
    if(request.headers.proxy==&#34;node.jtlebi&#34;)
    {
        sys.log(&#34;Loop detected&#34;);
        response.writeHead(500);
        response.write(&#34;Proxy loop !&#34;);
        response.end();
        return false;
    } 
    //append a tattoo to it
    else 
    {
        request.headers.proxy=&#34;node.jtlebi&#34;;
        return request;
    }
}&lt;/pre&gt;

&lt;p&gt;What if I need authentication for an app that doesn&amp;rsquo;t support it natively ? Let&amp;rsquo;s implement &amp;#8220;basic auth&amp;#8221; as defined in RFC 2617. It is really easy to do:&lt;/p&gt;

&lt;pre class=&#34;brush: jscript; title: ; notranslate&#34; title=&#34;&#34;&gt;//1st =&amp;gt; On each request, decode the &#34;authorization&#34; field (easy part)
function authenticate(request)
{
    token={
            &#34;login&#34;:&#34;anonymous&#34;,
            &#34;pass&#34;:&#34;&#34;
        };
    if (request.headers.authorization &amp;&amp; request.headers.authorization.search(&#39;Basic &#39;) === 0) 
    {
        // fetch login and password
        basic = (new Buffer(request.headers.authorization.split(&#39; &#39;)[1], &#39;base64&#39;).toString());
        sys.log(&#34;Authentication token received: &#34;+basic);
        basic = basic.split(&#39;:&#39;);
        token.login = basic[0];
        token.pass  = basic[1];//fixme: potential trouble if there is a &#34;:&#34; in the pass
    }
    return token;
}

//2nd =&amp;gt; Somewhere in your application logic, check credentials
//3rd =&amp;gt; If they are not valid, issue an authentication request (trivial part :p )
function action_authenticate(response, msg)
{
    response.writeHead(401,{
        &#39;WWW-Authenticate&#39;: &#34;Basic realm=\&#34;&#34;+msg+&#34;\&#34;&#34;
    });
    response.end();
}
&lt;/pre&gt;

&lt;p&gt;To make it short, this reverse-proxy enables :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IPv4/IPv6 only application to answer to both IP familly&lt;/li&gt;
&lt;li&gt;Independent servers to work transparently on the same public interface/port&lt;/li&gt;
&lt;li&gt;Unsecured application to get very basic user security&lt;/li&gt;
&lt;li&gt;more to come ? Let me know&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>