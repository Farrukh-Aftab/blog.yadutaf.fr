<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Yet another enthusiast blog!</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on Yet another enthusiast blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>G√©rer son site avec GIT sur un serveur mutualis√©</title>
      <link>http://localhost:1313/2013/11/30/gerer-son-site-avec-git-sur-un-serveur-mutualise/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2013/11/30/gerer-son-site-avec-git-sur-un-serveur-mutualise/</guid>
      <description>

&lt;p&gt;Que l&amp;rsquo;on souhaite disposer simplement d&amp;rsquo;un gestionnaire de version pour un projet occasionnel ou mettre en place une v√©ritable solution &amp;#8220;d&amp;rsquo;Int√©gration Continue&amp;#8221; (&amp;#8220;Continuous Integration&amp;#8221; en anglais ou &amp;#8220;CI&amp;#8221;) GIT est probablement la solution la plus puissante et la plus versatile. Cet article retrace les √©tapes cl√©s pour mettre en place GIT sur un serveur mutualis√©.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pr√©requis&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compte Mutualis√© avec acc√®s SSH (&lt;a href=&#34;http://www.ovh.com/fr/hebergement-web/&#34; title=&#34;H√©bergement Web chez OVH&#34;&gt;√† partir de l&amp;rsquo;offre pro chez OVH par ex&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Connaissance de base de GIT ainsi qu&amp;rsquo;un client fonctionnel (&lt;a href=&#34;http://git-scm.com/documentation&#34; title=&#34;Introduction √† GIT&#34;&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Connaissances de bases de SSH/Bash&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;premi√®re-√©tape-initialiser-un-d√©p√¥t-distant:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Premi√®re √©tape: Initialiser un d√©p√¥t distant&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dans votre &amp;#8220;/homez.123/&lt;votre identifiant&gt;&amp;#8221;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git init --bare site-perso.git
# Initialized empty Git repository in /homez.123/identifiant/site-perso.git/
&lt;/pre&gt;

&lt;p&gt;Cette commande initialise un d√©p√¥t git &amp;#8220;nue&amp;#8221; (bare) dans le dossier `site-perso.git`. Aucune copie de travail ne sera pr√©sente sur le serveur. Et c&amp;rsquo;est probablement ce que vous voulez üòâ&lt;/p&gt;

&lt;h2 id=&#34;deuxi√®me-√©tape-clone-local-et-premi√®re-publication:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Deuxi√®me √©tape: Clone local et premi√®re publication&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Clone local:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git clone identifiant@ftp.cluster012.ovh.net:site-perso.git
# Cloning into &#39;site-perso&#39;...
# warning: You appear to have cloned an empty repository.
# Checking connectivity... done
cd site-perso/
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Cr√©ation d&amp;rsquo;une premi√®re page:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;echo &#34;Bienvenu sur mon nouveau site&#34; &amp;gt; index.html
git add index.html
git commit -am &#34;ajoute la page d&#39;accueil&#34;
# [master (root-commit) 87a0483] ajoute la page d&#39;accueil
#  1 file changed, 1 insertion(+)
#  create mode 100644 index.html
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Publication:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;git push origin master
# Counting objects: 3, done.
# Writing objects: 100% (3/3), 262 bytes | 0 bytes/s, done.
# Total 3 (delta 0), reused 0 (delta 0)
# To identifiant@ftp.cluster012.ovh.net:site-perso.git
#  * [new branch]      master -&amp;gt; master
&lt;/pre&gt;

&lt;p&gt;On a maintenant un site avec une page statique versionn√©. Une copie du d√©p√¥t GIT se trouve directement sur le serveur web. Toute personne disposant d&amp;rsquo;un acc√®s √† ce compte SSH aura la possibilit√© de contribuer au d√©p√¥t.&lt;/p&gt;

&lt;h2 id=&#34;troisi√®me-√©tape-optionnelle-acc√®s-collaborateurs-et-public:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Troisi√®me √©tape (optionnelle): Acc√®s collaborateurs et Public&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Acc√®s en √©criture pour les collaborateurs, restreint √† GIT:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dans la mesure o√π l&amp;rsquo;on a pas la main sur le syst√®me d&amp;rsquo;authentification syst√®me, on va utiliser l&amp;rsquo;authentification par cl√© publique ssh en for√ßant la commande &amp;#8220;git-shell&amp;#8221;. De cette mani√®re, on bloque l&amp;rsquo;acc√®s √† toutes actions autres que GIT (sftp, shell, tunnel, &amp;#8230;). Pour plus d&amp;rsquo;information sur l&amp;rsquo;authentification par cl√© publique SSH, je vous invite √† consulter &lt;a href=&#34;http://git-scm.com/book/fr/Git-sur-le-serveur-G%C3%A9n%C3%A9ration-des-cl%C3%A9s-publiques-SSH&#34; title=&#34;Manuel GIT - authentification par cl√© publique SSH&#34;&gt;l‚Äôexcellent manuel de GIT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dans le fichier &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;, ajoutez une ligne du type:&lt;/p&gt;

&lt;pre class=&#34;brush: plain; title: ; notranslate&#34; title=&#34;&#34;&gt;command=&#34;git-shell&#34;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAD3NzaC1yc2EABBBCIwAAAQEAtRFmADxUSCX97CS/Uh7/N0y0vL...
&lt;/pre&gt;

&lt;p&gt;En utilisant une technique comparable il serait possible de mettre en place un contr√¥le d&amp;rsquo;autorisation fine mais cela sort du cadre de cet article. Pour plus d&amp;rsquo;informations sur une piste possible, je vous invite √† consulter le tr√®s complet &lt;a href=&#34;https://github.com/sitaramc/gitolite/&#34;&gt;projet gitolite&lt;/a&gt;. Bien qu&amp;rsquo;il ne soit pas tr√®s adapt√© √† un h√©bergement mutualis√©, ses techniques pourront servir de r√©f√©rence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acc√®s en public en lecture seule:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exemple: ouvrir un acc√®s public √† &lt;code&gt;site-perso.git&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;# Dans votre &#34;/homez.123/&amp;lt;votre identifiant&amp;gt;&#34;

# 1/ activer la publication automatique
mv site-perso.git/hooks/post-update.sample site-perso.git/hooks/post-update
chmod +x site-perso.git/hooks/post-update

# 2/ publication dans le dossier web `public-git`
mkdir -p www/public-git
cd www/public-git
ln -s ../../site-perso.git ./
&lt;/pre&gt;

&lt;p&gt;Votre d√©p√¥t peut maintenant √™tre clon√© avec &lt;code&gt;git clone http://www.example.com/public-git/site-perso.git&lt;/code&gt;. Pour r√©voquer l&amp;rsquo;acc√®s, il suffit de supprimer le lien dans &lt;code&gt;www/public-git/site-perso.git&lt;/code&gt;. Il n&amp;rsquo;est pas n√©cessaire de supprimer le &amp;#8220;hook&amp;#8221;. Pour ajouter une authentification minimale, la m√©thode habituelle par &amp;#8220;htaccess&amp;#8221; pourra √™tre employ√©e.&lt;/p&gt;

&lt;h2 id=&#34;quatri√®me-√©tape-optionnelle-d√©ploiement-continue-oh-yeah:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Quatri√®me √©tape (optionnelle): D√©ploiement continue (Oh Yeah !)&lt;/h2&gt;

&lt;p&gt;La cr√®me de la cr√®me avec GIT, ce sont les &amp;#8220;hook&amp;#8221; que je traduirai par &amp;#8220;prises&amp;#8221; en fran√ßais. Ce sont des points sur lesquels on se branche ais√©ment pour personnaliser un traitement. On a d√©j√† utilis√© l&amp;rsquo;un de ceux qui sont fourni √† titre d&amp;rsquo;exemple dans tout d√©p√¥t GIT pour le rendre disponible en HTTP.&lt;/p&gt;

&lt;p&gt;Ici, nous avons besoin d&amp;rsquo;une &amp;#8220;prise&amp;#8221; sur mesure qui va se charger de mettre √† jour &lt;code&gt;site-perso&lt;/code&gt; √† chaque fois qu&amp;rsquo;une mise √† jour est &amp;#8220;pouss√©e&amp;#8221; (publi√©e) sur la branche &amp;#8220;prod&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemple de &amp;#8220;prise&amp;#8221; GIT assurant la publication automatique:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: site-perso.git/hooks/post-receive; notranslate&#34; title=&#34;site-perso.git/hooks/post-receive&#34;&gt;#!/bin/bash

# Pour chaque branche affect√©e par un &#34;push&#34;, GIT
# nous passe sur une ligne et dans cet ordre:
# &amp;lt;ancienne r√©vision&amp;gt; &amp;lt;nouvelle r√©vision&amp;gt; &amp;lt;~nom de la branche&amp;gt;
while read oldrev newrev ref
do
    branch=`echo $ref | cut -d/ -f3`
    # mise √† jour de la version de production ?
    if [ &#34;$branch&#34; == &#34;prod&#34; ]
    then
        reponame=$(basename `pwd` | sed &#39;s/\.git$//&#39;)
        # 1/ passer le site en maintenance
        echo &#34;[$reponame] 1/4 Passage en mode maintenance&#34;
        # 2/ mettre √† jour le code 
        echo &#34;[$reponame] 2/4 Mise √† jour&#34;
        GIT_WORK_TREE=~/$reponame git checkout -f $branch
        # 3/ Param√®trage, migration de sch√©ma, ...
        echo &#34;[$reponame] 3/4 Migration&#34;
        # 4/ rendre le site √† nouveau disponible
        echo &#34;[$reponame] 4/4 Passage en mode production&#34;
    fi
done
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Activer la prise:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;chmod +x site-perso.git/hooks/post-receive&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exemple de fonctionnement:&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: session git locale &amp;#039;site-perso&amp;#039;; notranslate&#34; title=&#34;session git locale &amp;#039;site-perso&amp;#039;&#34;&gt;git checkout master
# Switched to branch &#39;master&#39;

echo &#34;version 1.2&#34; &amp;gt;&amp;gt; CHANGELOG
git commit -am &#34;Update CHANGELOG&#34;
# [master 75c770c] Update CHANGELOG
#  1 file changed, 1 insertion(+)

git checkout prod
# Switched to branch &#39;prod&#39;

git merge master
# Updating 2f8b5ca..75c770c
# Fast-forward
#  CHANGELOG | 1 +
#  1 file changed, 1 insertion(+)

git push
# Counting objects: 5, done.
# Delta compression using up to 4 threads.
# Compressing objects: 100% (2/2), done.
# Writing objects: 100% (3/3), 312 bytes | 0 bytes/s, done.
# Total 3 (delta 0), reused 0 (delta 0)
# remote: [site-perso] 1/4 Passage en mode maintenance
# remote: [site-perso] 2/4 Mise a jour
# remote: Switched to branch &#39;prod&#39;
# remote: [site-perso] 3/4 Migration
# remote: [site-perso] 4/4 Passage en mode production
# To lj75593x1@ftp.cluster012.ovh.net:site-perso.git
#    2f8b5ca..75c770c  master -&amp;gt; master
#    2f8b5ca..75c770c  prod -&amp;gt; prod
&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:9a61f479ec3b884c96ec71a3289973af&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;GIT est incroyablement puissant, mais √ßa vous le saviez d√©j√†. Bien ma√Ætris√©, il permet de mettre en place √† moindre frais une v√©ritable solution de d√©ploiement continue et de travail collaboratif pour un site Web. Un grand &amp;#8220;plus&amp;#8221; en terme de professionnalisme. D&amp;rsquo;autre part, cette solution √† l&amp;rsquo;immense avantage de fonctionner avec une offre d&amp;rsquo;h√©bergement mutualis√© en disposant d&amp;rsquo;un simple acc√®s SSH+GIT.&lt;/p&gt;

&lt;p&gt;Happy GITing !&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>