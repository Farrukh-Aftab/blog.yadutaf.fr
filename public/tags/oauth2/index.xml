<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oauth2 on Yet another enthusiast blog!</title>
    <link>http://blog.yadutaf.fr/tags/oauth2/</link>
    <description>Recent content in Oauth2 on Yet another enthusiast blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 May 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.yadutaf.fr/tags/oauth2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gmail Oauth2 with Python and bottle</title>
      <link>http://blog.yadutaf.fr/2013/05/29/gmail-oauth2-with-python-and-bottle/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2013/05/29/gmail-oauth2-with-python-and-bottle/</guid>
      <description>&lt;p&gt;Remember my previous post about &lt;a href=&#34;https://blog.jtlebi.fr/2013/04/12/fetching-all-messages-since-last-check-with-python-imap/&#34; title=&#34;Fetching all messages since last check with Python + Imap&#34;&gt;checking out only new mails from a IMAP account with Python&lt;/a&gt; ? The main issue with this was the absolute need for user&amp;rsquo;s password.&lt;/p&gt;

&lt;p&gt;The solution for this OAuth2&amp;#8230; which has no decent support for Python 3. Well, it&amp;rsquo;s not exactly true. Guys behind &lt;a href=&#34;https://pypi.python.org/pypi/oauthlib&#34;&gt;oauthlib&lt;/a&gt; did quite a good job but OAuth2 is such a generic framework that using a library quickly requires you to write more code than without anyway.&lt;/p&gt;

&lt;p&gt;Soooo, enough talks. First, &lt;a href=&#34;https://code.google.com/apis/console#access&#34;&gt;get you API key here.&lt;/a&gt; Make sure to create a web-application for this example.&lt;/p&gt;

&lt;p&gt;Then it&amp;rsquo;s merely a matter of reading/implementing the spec. Most documentation will warn you on how hard and overly complicated it is. It is NOT. Well, not for a hacker like you anyway ðŸ˜‰ Here are the basic ideas behind the protocol. I&amp;rsquo;ll provide a link to the full source code at the end of this post.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;redirect the user you want to authenticate to authorization page&lt;/li&gt;
&lt;li&gt;authorization page redirects your user to your callback and gives you a CODE (must be pre-defined in the console or the process will miserably fail)&lt;/li&gt;
&lt;li&gt;on the server side, ask GOOGLE to exchange this CODE for a TOKEN + REFRESH_TOKEN&lt;/li&gt;
&lt;li&gt;GOOGLE gives you both back along with the token&amp;rsquo;s lifetime.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most of the time, the CODE must be consumed within 10min. DON&amp;rsquo;T use it twice, otherwise GOOGLE might consider it stolen and revoke every single token and refresh token granted with it. You&amp;rsquo;ve been warned.&lt;/p&gt;

&lt;p&gt;The TOKEN will usually expire after an hour. Once expired, you will need to renew it. If you blindly used the provided snippet (which I do not recommend given it&amp;rsquo;s draft quality), your application specified that it was in offline mode i.e your &lt;em&gt;user&lt;/em&gt; is not always online while you application accesses his account. Hence, you got a REFRESH TOKEN from Google to refresh the access token yourself. This second token never expires unless the user explicitly revokes your application access.&lt;/p&gt;

&lt;p&gt;The last step is now to get the job done and authenticate to the Gmail IMAP server using the provided token. Luckily, this is the easiest part.&lt;/p&gt;

&lt;pre class=&#34;brush: python; title: ; notranslate&#34; title=&#34;&#34;&gt;auth_string = &#39;user=%s\1auth=Bearer %s\1\1&#39; % (username, access_token)
imap_conn = imaplib.IMAP4_SSL(&#39;imap.gmail.com&#39;)
imap_conn.authenticate(&#39;XOAUTH2&#39;, lambda x: auth_string)
&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it, you done !&lt;/p&gt;

&lt;p&gt;Full source code (~94 loc): &lt;a href=&#34;https://gist.github.com/jtlebi/5673096&#34;&gt;https://gist.github.com/jtlebi/5673096&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make this code clean (really !)&lt;/li&gt;
&lt;li&gt;Add state checking, this is essential both for anti-forgery checks and to track which user you were authenticating&amp;#8230;&lt;/li&gt;
&lt;li&gt;Add anti-forgery checks on the token by checking it&amp;rsquo;s ignature&lt;/li&gt;
&lt;li&gt;Plug the token refresh code in (needs to be called roughly every hours)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>