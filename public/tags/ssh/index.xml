<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssh on Yet another enthusiast blog!</title>
    <link>http://blog.yadutaf.fr/tags/ssh/</link>
    <description>Recent content in Ssh on Yet another enthusiast blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.yadutaf.fr/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Running a graphical app in a Docker container, on a remote server</title>
      <link>http://blog.yadutaf.fr/2017/09/10/running-a-graphical-app-in-a-docker-container-on-a-remote-server/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2017/09/10/running-a-graphical-app-in-a-docker-container-on-a-remote-server/</guid>
      <description>

&lt;p&gt;A few days ago, I found myself trying to launch Qemu, the system emulator, into a dedicated &lt;a href=&#34;http://blog.yadutaf.fr/2014/01/19/introduction-to-linux-namespaces-part-5-net/&#34;&gt;network namespace&lt;/a&gt; (that&amp;rsquo;s easy), on a remote host (that&amp;rsquo;s the fun part). As it was fun, I looked for a way to do it. Spoiler alert, it involves &amp;ldquo;xauth&amp;rdquo; tricks, bind mounts and TCP to UNIX domain socket forwarding. No more.&lt;/p&gt;

&lt;p&gt;My first though was that it&amp;rsquo;s probably not worth a blog post. Who uses network namespaces on a daily basis? Not everyone (I do).&lt;/p&gt;

&lt;p&gt;Except that network namespaces are one of the containers corner stone. And quite a lot of people is using Docker on a daily basis, possibly on a remote server, possibly with graphical applications.&lt;/p&gt;

&lt;p&gt;Hmmm, that&amp;rsquo;s another story. Let&amp;rsquo;s write a new container torture post then.&lt;/p&gt;

&lt;p&gt;At the end of this post, you will have a working setup to run graphical applications in a Docker container on a remote server accessed via SSH with X11 forwarding with not particular setup on the container side.&lt;/p&gt;

&lt;h3 id=&#34;running-a-graphical-app-via-ssh:6dc1c5ae07315872c30f93a6902bf01e&#34;&gt;Running a graphical app via SSH&lt;/h3&gt;

&lt;p&gt;Running a graphical application on a remote (Linux) server via SSH is considered a solved problem (at least until we run Wayland on servers&amp;hellip;). Here is a quick walk through anyway.&lt;/p&gt;

&lt;p&gt;By default, if you try to run an X11 based graphical application via SSH, it will not display anything and instead print a rather cryptic error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh localhost -- xterm
xterm: Xt error: Can&#39;t open display: 
xterm: DISPLAY is not set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is easily fixed by explicitly enabling X11 forwarding, if the server policy allows it, by adding the &amp;ldquo;-X&amp;rdquo; argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -X localhost -- xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should now see a beautiful xterm window. Granted, it&amp;rsquo;s not the most impressive. Who cares?&lt;/p&gt;

&lt;h3 id=&#34;running-a-graphical-app-inside-a-docker:6dc1c5ae07315872c30f93a6902bf01e&#34;&gt;Running a graphical app inside a Docker&lt;/h3&gt;

&lt;p&gt;Running a graphical application in a Docker container, is also considered a solved problem, mostly thanks to &lt;a href=&#34;https://blog.jessfraz.com/post/docker-containers-on-the-desktop/&#34;&gt;Jessie Frazelle&amp;rsquo;s posts on the topic&lt;/a&gt; and numerous other SO questions and posts. Let&amp;rsquo;s do one more :)&lt;/p&gt;

&lt;p&gt;For the sake of this post, I&amp;rsquo;ll use this simple Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y xterm
RUN useradd -ms /bin/bash xterm
USER xterm
WORKDIR /home/xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All it does is start from a Ubuntu image, install the xterm package, creates a dedicated user and set the env to use this user. This is in no way the perfect Dockerfile, but it serves its goal!&lt;/p&gt;

&lt;p&gt;If you try to run it the &amp;ldquo;naive&amp;rdquo; way, here is what it should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$&amp;gt; docker run -it --rm xterm xterm 
xterm: Xt error: Can&#39;t open display: 
xterm: DISPLAY is not set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, let&amp;rsquo;s bring in the DISPLAY variable&amp;hellip; and bring the related X11 Unix socket:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm -e DISPLAY=${DISPLAY} -v /tmp/.X11-unix:/tmp/.X11-unix xterm xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, an Xterm window. Told you this is one was easy.&lt;/p&gt;

&lt;h3 id=&#34;next-level-running-a-graphical-application-in-a-docker-via-ssh:6dc1c5ae07315872c30f93a6902bf01e&#34;&gt;Next level: Running a graphical application in a Docker via SSH&lt;/h3&gt;

&lt;p&gt;Now that we know how to run a graphical app from a Docker container &lt;em&gt;OR&lt;/em&gt; from a remote server via SSH, let&amp;rsquo;s see how we can do &lt;em&gt;both&lt;/em&gt; at a time. Let&amp;rsquo;s run a graphical application inside a Docker container, on a remote server.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s try to naively chain both tricks: (spoiler: it won&amp;rsquo;t work)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -X localhost
docker run -it --rm -e DISPLAY=${DISPLAY} -v /tmp/.X11-unix:/tmp/.X11-unix xterm xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should get an error like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xterm: Xt error: Can&#39;t open display: localhost:10.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so the brute force approach does not work. What&amp;rsquo;s going on exactly?&lt;/p&gt;

&lt;p&gt;Have a look at the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable, when running a graphical app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a Docker container: &lt;code&gt;:0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On a remote server via SSH: &lt;code&gt;localhost:10.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your mileage may vary, but the first obvious things is they do not describe the same thing.&lt;/p&gt;

&lt;p&gt;The first one, the Docker version, instructs the X11 client to look for the &lt;code&gt;/tmp/.X11-unix/X0&lt;/code&gt; UNIX domain socket to talk to the local X server. Obviously, using a UNIX domain socket has not chance to work on a remote system. Hence the different value. It instructs the X11 client to talk to the &amp;ldquo;remote&amp;rdquo; X server on localhost, &amp;ldquo;slot&amp;rdquo; 10 over TCP.&lt;/p&gt;

&lt;p&gt;I said &amp;ldquo;slot&amp;rdquo; as this is not an actual port number. The actual port number is &lt;code&gt;6000 + slot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can now see that the process listening on port 6010 on the server is the SSH daemon itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo lsof -i4:6010
COMMAND   PID       USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME
sshd    30333 jean-tiare   10u  IPv4 23770030      0t0  TCP localhost:6010 (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case the SSH daemon opens a TCP tunnel between the client and the remote server and forwards all data to the local server as specified by the local &lt;code&gt;DISPLAY&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;One way to overcome this limitation is to launch the Docker container using the host&amp;rsquo;s network namespace with &lt;code&gt;--net host&lt;/code&gt; but this is generally not what you want as you&amp;rsquo;d break your network isolation in the same time.&lt;/p&gt;

&lt;p&gt;Another way to overcome this, is to re-export the TCP connection as a UNIX domain socket and launch the application like we are used to. Fortunately, a well-known tool can do exactly this: socat.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Log into the remote server
ssh -X localhost

# Get the Display number from the DISPLAY variable
DISPLAY_NUMBER=$(echo $DISPLAY | cut -d. -f1 | cut -d: -f2)

# Proxy between the TCP and the Unix domain world, in the background
socat TCP4:localhost:60${DISPLAY_NUMBER} UNIX-LISTEN:/tmp/.X11-unix/X${DISPLAY_NUMBER} &amp;amp;

# Expose the &amp;quot;new&amp;quot; display address
export DISPLAY=:$(echo $DISPLAY | cut -d. -f1 | cut -d: -f2)

# Finally, open xterm in the Docker....
docker run -it --rm -e &#39;DISPLAY=${DISPLAY}&#39; -v /tmp/.X11-unix:/tmp/.X11-unix xterm xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should output something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X11 connection rejected because of wrong authentication.
xterm: Xt error: Can&#39;t open display: :10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Wrong authentication&amp;rdquo;? What do you mean by &amp;ldquo;wrong authentication&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;X11 uses a concept of &amp;ldquo;magic cookies&amp;rdquo; to grant access to the server. A bit like web cookies. If you don&amp;rsquo;t have the cookie, you can not open a connection to the server and then not display anything. This authentication information is stored in &lt;code&gt;~/.Xauthority&lt;/code&gt; and can be manipulated using the &lt;code&gt;xauth&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Still from the SSH connection, Let&amp;rsquo;s retry the proxy trick with the authority file mounted in the container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;socat TCP4:localhost:60${DISPLAY_NUMBER} UNIX-LISTEN:/tmp/.X11-unix/X${DISPLAY_NUMBER} &amp;amp;
docker run -it --rm \
  -e DISPLAY=${DISPLAY} \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -v ${HOME}/.Xauthority:/home/xterm/.Xauthority \
  xterm xterm  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X11 connection rejected because of wrong authentication.
xterm: Xt error: Can&#39;t open display: :10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still not&amp;hellip;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at what &lt;code&gt;xauth list&lt;/code&gt; outputs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
jt-laptop/unix:10  MIT-MAGIC-COOKIE-1  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cookie is obviously bogus in the example. But the interesting part is: the hostname is actually part of the authentication. Each Docker container get its own hostname. Maybe that&amp;rsquo;s the cause of the last failure?&lt;/p&gt;

&lt;p&gt;We can cheat and force the hostname inside the container to be the same as the SSH host and retry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;socat TCP4:localhost:60${DISPLAY_NUMBER} UNIX-LISTEN:/tmp/.X11-unix/X${DISPLAY_NUMBER} &amp;amp;
docker run -it --rm \
  -e DISPLAY=${DISPLAY} \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -v $HOME/.Xauthority:/home/xterm/.Xauthority \
  --hostname $(hostname) \
  xterm xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works! &amp;trade;&lt;/p&gt;

&lt;p&gt;To sum it up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Open an SSH connection to the remote server
ssh -X localhost

# Get the DISPLAY slot and create the new DISPLAY variable
DISPLAY_NUMBER=$(echo $DISPLAY | cut -d. -f1 | cut -d: -f2)
export DISPLAY=:${DISPLAY_NUMBER}

# Proxy between the TCP and the Unix domain world, in the background
socat TCP4:localhost:60${DISPLAY_NUMBER} UNIX-LISTEN:/tmp/.X11-unix/X${DISPLAY_NUMBER} &amp;amp;

# Finally, open xterm in the Docker....
docker run -it --rm \
  -e &#39;DISPLAY=${DISPLAY}&#39; \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  --hostname $(hostname) \
  xterm xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stretch-goal-clean-it-up:6dc1c5ae07315872c30f93a6902bf01e&#34;&gt;Stretch goal: clean it up!&lt;/h3&gt;

&lt;p&gt;The proof of concept works, that&amp;rsquo;s great. How can we make it cleaner? Well, first remember that containers goal is to to isolate as much as possible an application from the host. Sharing the X11 server is not exactly the best way to do it&amp;hellip; but we we can&amp;rsquo;t really help on that. What we can (should) isolate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The hostname. We overloaded it such that it matches the one of the SSH server.&lt;/li&gt;
&lt;li&gt;The Unix sockets. They are all shared in all containers sharing the same trick.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can set the DISPLAY variable to whatever we want, provided&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have the corresponding UNIX domain socket&lt;/li&gt;
&lt;li&gt;We have the corresponding authentication cookie&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The later is also true for the hostname.&lt;/p&gt;

&lt;p&gt;On the remote server, let&amp;rsquo;s do some setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Prepare target env
CONTAINER_DISPLAY=&amp;quot;0&amp;quot;
CONTAINER_HOSTNAME=&amp;quot;xterm&amp;quot;

# Create a directory for the socket
mkdir -p display/socket
touch display/Xauthority

# Get the DISPLAY slot
DISPLAY_NUMBER=$(echo $DISPLAY | cut -d. -f1 | cut -d: -f2)

# Extract current authentication cookie
AUTH_COOKIE=$(xauth list | grep &amp;quot;^$(hostname)/unix:${DISPLAY_NUMBER} &amp;quot; | awk &#39;{print $3}&#39;)

# Create the new X Authority file
xauth -f display/Xauthority add ${CONTAINER_HOSTNAME}/unix:${CONTAINER_DISPLAY} MIT-MAGIC-COOKIE-1 ${AUTH_COOKIE}

# Proxy with the :0 DISPLAY
socat TCP4:localhost:60${DISPLAY_NUMBER} UNIX-LISTEN:display/socket/X${CONTAINER_DISPLAY} &amp;amp;

# Launch the container
docker run -it --rm \
  -e DISPLAY=:${CONTAINER_DISPLAY} \
  -v ${PWD}/display/socket:/tmp/.X11-unix \
  -v ${PWD}/display/Xauthority:/home/xterm/.Xauthority \
  --hostname ${CONTAINER_HOSTNAME} \
  xterm xterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voila! (french accent inside) You no have the most beautifully awesome graphical app running on a remote (as far as localhost is remote) server, inside a Docker container.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing X2go on OVH Public Cloud</title>
      <link>http://blog.yadutaf.fr/2012/01/17/testing-x2go-on-ovh-public-cloud/</link>
      <pubDate>Tue, 17 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.yadutaf.fr/2012/01/17/testing-x2go-on-ovh-public-cloud/</guid>
      <description>

&lt;p&gt;About 1 month ago, &lt;a href=&#34;http://www.ovh.com/&#34; title=&#34;OVH website&#34;&gt;OVH&lt;/a&gt; launched its &amp;#8220;Public Cloud&amp;#8221;. This basically is a solution taking inspiration from Amazon&amp;rsquo;s AWS without being subject to the Patriot Act. At the moment, the &amp;#8220;Public Cloud&amp;#8221; is still pretty young and lacks some vital functionality as custom templates or a real storage solution but it&amp;rsquo;s on the way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.x2go.org/&#34; title=&#34;X2go official Website&#34;&gt;X2go&lt;/a&gt; is an open source remote desktop solution based on the very per-formant NX protocol. It feels very much like the remote server is in the same room. After a very quick test, it seems to much lighter and responsive than RDP.&lt;/p&gt;

&lt;h1 id=&#34;remote-instance-setup:9bf64dc3af8100b999fc0a9936364179&#34;&gt;Remote instance setup&lt;/h1&gt;

&lt;p&gt;Subscriptions to the gamma test OVH&amp;rsquo;s Cloud are here: &lt;a href=&#34;http://www.ovh.com/fr/cloud/&#34; title=&#34;OVH public Cloud Subscription&#34;&gt;http://www.ovh.com/fr/cloud/&lt;/a&gt;. They provide us with a nice and easy to use web interface as well as a full SOAP API and a shell script to automate instance and project management.&lt;/p&gt;

&lt;div id=&#34;attachment_104&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://blog.jtlebi.fr/wp-content/uploads/2012/01/ovh-manager.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-104&#34; title=&#34;OVH&#39;s instance manager&#34; src=&#34;http://blog.jtlebi.fr/wp-content/uploads/2012/01/ovh-manager-300x144.png&#34; alt=&#34;OVH&#39;s instance manager&#34; width=&#34;300&#34; height=&#34;144&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    OVH&#39;s instance manager
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;As the web interface is pretty intuitive, I&amp;rsquo;ll focus on the shell script usage in this blog post.&lt;/p&gt;

&lt;p&gt;The first command in the script will ask you for your credentials to launch a session. They are the same as the one used to connect to the &amp;#8220;Manager&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ wget http://www.ovh.com/fr/cloud/api/ovhcloud #download the script
$ chmod +x ovhcloud
$ ./ovhcloud instance addProject --name x2go-ovh # create a new project
$ ./ovhcloud instance getProjects #Lists all your projects
&lt;/pre&gt;

&lt;p&gt;Note: each object (Project, Instance, Task, Offer, Zone, &amp;#8230;) are suffixed to actions (get, add, delete, make, &amp;#8230;).&lt;/p&gt;

&lt;p&gt;Next step is to create the instances you need. In this example, I&amp;rsquo;ll create a single one.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ ./ovhcloud instance newInstance --projectName x2go-ovh --offerName xs --distributionName ubuntu1004-x64 --zoneName rbx1 --name server&lt;/pre&gt;

&lt;p&gt;TIP: For each parameter &amp;#8220;*name&amp;#8221; of this command, you can get a list of this possible values by issuing this command :&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ ./ovhcloud instance get* #General command
$ ./ovhcloud instance getDistributions #example
Function returned:
base    name               platform description
----    ----               -------- -----------
ubuntu  ubuntu1004-x64     64       OVH Ubuntu 1004 distribution - 64 bits
windows win2008sp2-std-x64 64       windows 2008sp2 std distribution - 64 bits
centos  centos5-x64        64       OVH Centos 5 distribution - 64 bits
debian  debian564          64       OVH Debian 5 distribution - 64 bits
debian  debian664          64       OVH Debian 6 distribution - 64 bits
&lt;/pre&gt;

&lt;p&gt;Each command leads to the internal creation of a &amp;#8220;task&amp;#8221; in the remote system. Let&amp;rsquo;s get a list of the tasks related to our project :&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ ./ovhcloud instance getTasks --projectId ****
projectId (long): ***
Function returned:
instanceId function    status finishDate zone comment lastUpdate                currentDetailedState todoDate                  id
---------- --------    ------ ---------- ---- ------- ----------                -------------------- --------                  --
66301      addInstance doing             rbx1         2012-01-16T13:52:08+01:00 installOns           2012-01-16T13:51:52+01:00 14571&lt;/pre&gt;

&lt;p&gt;Sadly the call interface is not consistent between functions. For some, one needs to give a project&amp;rsquo;s name whereas on other, it is the ID&amp;#8230;&lt;/p&gt;

&lt;p&gt;You can now use ssh to connect the instance.The following command will launch an interactive menu as the required parameter &amp;#8220;instanceId&amp;#8221; has not been specified. Anyway, it is not possible to specify it since this command is buggy &lt;img src=&#34;https://blog.jtlebi.fr/wp-includes/images/smilies/frownie.png&#34; alt=&#34;:(&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ ./ovhcloud instance ssh&lt;/pre&gt;

&lt;p&gt;Note: you can also directly grab the credentials and IP and use them to manually ssh. This could be used when tunneling for example.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ ./ovhcloud instance getLoginInformations&lt;/pre&gt;

&lt;h1 id=&#34;installing-x2go-on-the-instance:9bf64dc3af8100b999fc0a9936364179&#34;&gt;Installing X2go on the instance&lt;/h1&gt;

&lt;p&gt;This part is (almost) independent from the previous one. I&amp;rsquo;ll assume you are connected to a remote server running Ubuntu 10.04. It should be fine with any supported flavor of Ubuntu but I did not test it.&lt;/p&gt;

&lt;p&gt;On the remote server as well as the local client, install the package repository&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ sudo apt-get install python-software-properties #installation de la commande &#34;add-apt-repository&#34;
$ sudo add-apt-repository ppa:x2go/stable
$ sudo apt-get update&lt;/pre&gt;

&lt;p&gt;The installation is as easy as this&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ sudo apt-get install x2goserver
$ sudo apt-get install ubuntu-desktop
$ sudo apt-get install x2gognomebindings #brings some integration &lt;/pre&gt;

&lt;p&gt;No additional configuration is required ! Nonetheless, you should create a low privileged user as a client&amp;#8230;&lt;/p&gt;

&lt;p&gt;On the client side, just install package &amp;#8220;x2goclient&amp;#8221;.&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$ sudo apt-get install x2goclient &lt;/pre&gt;

&lt;h1 id=&#34;conclusion:9bf64dc3af8100b999fc0a9936364179&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You should now be able to run a Cloud desktop. It is possible to start/stop it on demand with a simple shell command :&lt;/p&gt;

&lt;pre class=&#34;brush: bash; title: ; notranslate&#34; title=&#34;&#34;&gt;$  ./ovhcloud instance stopInstance --instanceID *** &lt;/pre&gt;

&lt;p&gt;This &amp;#8220;Public Cloud&amp;#8221; is still very young. The script lacks consistency and is buggy, no real storage option is yet offered, &amp;#8230; Nonetheless, it looks very promising and the dev team listens well to users feedback &lt;img src=&#34;https://blog.jtlebi.fr/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I encourage the reader to test sound, folder and printer sharing between the client and the remote desktop. My experience is that the sound only works from a theoretical point of view as it uses a huge BP. Folder sharing is OK and I could not manage to make printer sharing work (at the moment).&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>